module TestFFT
using Test
using Muscade

a     = 1/2
c     = √(√2 /a) # Plancherel norm of g is 1
g(t)  = c  *exp(-π*(t/a)^2)   
Gf(f) = c*a*exp(-π*(f*a)^2)     # 𝔉f(g)(f)

## Testing 𝔉, 𝔉⁻¹

p1       = 6
n1       = 2^p1
δt1      = .04
δf1      = 1/(n1*δt1)
t1       = δt1*(-n1/2:n1/2-1)
f1       = δf1*(0:n1/2-1)
x1       = Complex.(g.(t1))
X1       = Complex.(Gf.(f1))
δf1′     = Muscade.getδf(n1,δt1   )
δt1′     = Muscade.getδt(n1,δf1′)
X1′′     = Muscade.𝔉(g.(t1),δt1) 
x1′′     = Muscade.𝔉⁻¹(X1′′,δf1)

p2      = 6
n2      = 2^p2
δt2     = .02
δf2     = 1/(n2*δt2)
t2      = δt2*(-n2/2:n2/2-1)
f2      = δf2*(0:n2/2-1)
x2      = Complex.(g.(t2))
X2      = Complex.(Gf.(f2))
δf2′    = Muscade.getδf(n2,δt2    )
δt2′    = Muscade.getδt(n2,δf2′)
X2′′    = Muscade.𝔉(g.(t2),δt2) 
x2′′    = Muscade.𝔉⁻¹(X2′′,δf2)

p3      = 7
n3      = 2^p3
δt3     = .04
δf3     = 1/(n3*δt3)
t3      = δt3*(-n3/2:n3/2-1)
f3      = δf3*(0:n3/2-1)
x3      = Complex.(g.(t3))
X3      = Complex.(Gf.(f3))
δf3′    = Muscade.getδf(n3,δt3    )
δt3′    = Muscade.getδt(n3,δf3′)
X3′′    = Muscade.𝔉(g.(t3),δt3) 
x3′′    = Muscade.𝔉⁻¹(X3′′,δf3)

@testset "𝔉" begin
   @test X1′′[1:4:end] ≈ [1.189207114814641 + 6.215787535650553e-11im, 0.17478665016678313 - 3.1401849173675505e-18im, 0.0005549583962780497 - 4.906538933386798e-20im, 3.7946754330555795e-8 - 1.2131379938500347e-17im, -9.433487289666338e-11 + 0.0im, -7.883303225766639e-11 - 3.7252857920461104e-17im, -6.910835631031991e-11 - 9.813077866773595e-20im, -6.382811459257399e-11 - 1.2560739669470202e-17im]
   @test X2′′[1:4:end] ≈ [1.1876054622925485 + 4.422702434962231e-5im, -0.00018588382990463145 + 9.199760500100245e-21im, -0.00027110446788896394 + 0.0im, -0.00013749500103721685 + 7.666467083416872e-21im, -8.684352943376467e-5 + 0.0im, -6.345077476921056e-5 + 3.3732455167034237e-20im, -5.165241997780222e-5 + 2.453269466693399e-20im, -4.594358275790417e-5 + 2.453269466693399e-20im]
   @test X3′′[1:8:end] ≈ [1.1892071150027212 + 0.0im, 0.17478665034221738 - 2.5121479338940404e-17im, 0.0005549585430093939 - 4.293221566713448e-20im, 3.806399293350315e-8 - 1.2923827836724815e-17im, 5.647308555393803e-14 + 0.0im, -8.814090226233139e-18 - 3.6308807366980927e-19im, 3.056773755499975e-17 + 0.0im, -3.7682219008410604e-17 - 2.5121479338940404e-17im]
end
@testset "𝔉⁻¹" begin
   @test x1′′[1:8:end]  ≈ [1.9239580570698244e-9, 1.5708528559273443e-5, 0.009780887836558198, 0.46443393200699334, 1.6817928305074294, 0.4644339320069935, 0.009780887836558198, 1.5708528559457435e-5]
   @test x2′′[1:8:end]  ≈ [0.009780887836558566, 0.09297437103021428, 0.46443393200699346, 1.2191590255005362, 1.6817928305074292, 1.2191590255005367, 0.46443393200699346, 0.09297437103021478]
   @test x3′′[1:16:end] ≈ [0.0, -4.4082185729647003e-17, 1.923958302396771e-9, 0.009780887836558276, 1.6817928305074294, 0.009780887836558425, 1.9239581797332973e-9, -1.724955093768796e-17]
end

@testset "δt vs. δf" begin
   @test δt1′ ≈ δt1
   @test δf1′ ≈ δf1
   @test δt2′ ≈ δt2
   @test δf2′ ≈ δf2
   @test δt3′ ≈ δt3
   @test δf3′ ≈ δf3
end

@testset "𝔉 is unitary" begin
   @test (sum(abs2.(X1′′))-abs2(X1′′[1])/2).*δf1   ≈ 1.
   @test (sum(abs2.(X2′′))-abs2(X2′′[1])/2).*δf2   ≈ 0.999994103038435
   @test (sum(abs2.(X3′′))-abs2(X3′′[1])/2).*δf3   ≈ 1.
end

end #module
