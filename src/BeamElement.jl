# TODO
# 1) This code is for static analysis. Use `Muscade.motion` to create Adiffs that will facilitate the dynamic computation.
# 2) This code is not A-parameterized. Arguably, we do not want to A-parameterize the element, just the material:
#    - create an example of A-parameterized material
#    - make the element pass on the A-parameters to all Gauss points (valid for material optimisation, not for local damage detection)
#    - .doflist must interrogate the material to get the list of A-dofs
# 3) U-dofs, using a "isoparametric" formulation
# 4) performance.  Liberal use of nested Adiff makes code simple, but not fast...


using StaticArrays, LinearAlgebra
using Muscade

# 3D rotation

const Mat33{R}   = SMatrix{3,3,R,9}
const Vec3{R}    = SVector{3,R}

normalize(v)     = v/norm(v)
spin(  v::Vec3 ) = SMatrix{3,3}(0,v[3],-v[2],-v[3],0,v[1],v[2],-v[1],0)
spin‚Åª¬π(m::Mat33) = SVector{3}(m[3,2]-m[2,3],m[1,3]-m[3,1],m[2,1]-m[1,2])/2
trace( m::Mat33) = sum(m[i,i] for i‚àà(1,2,3))
function Rodrigues(v::Vec3) 
    S = spin(v)
    Œ∏ = norm(v)
    return I + sinc1(Œ∏)*S + sinc1(Œ∏/2)^2/2*S*S  
end
function Rodrigues‚Åª¬π(m)
    c = (trace(m)-1)/2
    if c<0.99999
        Œ∏ = acos((trace(m)-1)/2)
        v = spin‚Åª¬π(m)/sinc1(Œ∏)    #sinc1(acos(x))‚âàx for x‚âà1
    else
        v = spin‚Åª¬π(m)
    end
    return v
end
# create a rotation vector that acts on u to make it colinear with v.  Fails if |u|=0, |v|=0 or Œ∏=œÄ
function adjust(u,v)
    u,v = normalize.((u,v))
    c,w = dot(u,v), cross(u,v) 
    s   = norm(w)
    Œ∏   = atan(s,c)
    return w/sinc1(Œ∏)
end

# Cross section "material"

struct BeamCrossSection
    EA :: ùï£
    EI :: ùï£
    GJ :: ùï£
end
BeamCrossSection(;EA=EA,EI=EI,GJ=GJ) = BeamCrossSection(EA,EI,GJ)

@espy function resultants(o::BeamCrossSection,Œµ,Œ∫,x·µß,rot)
    ‚òºf‚ÇÅ = o.EA*Œµ
    ‚òºm  = SVector(o.GJ*Œ∫[1],o.EI*Œ∫[2],o.EI*Œ∫[3])
    ‚òºf‚Çë = SVector(0.,0.,0.)
    return f‚ÇÅ,m,f‚Çë
end

# Static Euler beam element

const ngp        = 2
const ndim       = 3
const ndof       = 12
const nnod       = 2

# Though the shape function matrices are sparse, do not "unroll" them.  That would be faster but considerably clutter the code

# Œ∂‚àà[-1/2,1/2]                          Œ∂‚àà[-1,1]
N‚Çê‚ÇÅ(Œ∂) = -Œ∂                           # N‚Çê‚ÇÅ(Œ∂) = -Œ∂/2
N‚Çê‚ÇÇ(Œ∂) =  Œ∂                           # N‚Çê‚ÇÇ(Œ∂) =  Œ∂/2
N·µ§‚ÇÅ(Œ∂) = ( 8Œ∂^3     -6Œ∂+2)/4          # N·µ§‚ÇÅ(Œ∂) = ( Œ∂^3    -3Œ∂+2)/4  
N·µ§‚ÇÇ(Œ∂) = (-8Œ∂^3     +6Œ∂+2)/4          # N·µ§‚ÇÇ(Œ∂) = (-Œ∂^3    +3Œ∂+2)/4
N·µ•‚ÇÅ(Œ∂) = ( 8Œ∂^3-4Œ∂^2-2Œ∂+1)/4          # N·µ•‚ÇÅ(Œ∂) = ( Œ∂^3-Œ∂^2- Œ∂+1)/4
N·µ•‚ÇÇ(Œ∂) = ( 8Œ∂^3+4Œ∂^2-2Œ∂-1)/4          # N·µ•‚ÇÇ(Œ∂) = ( Œ∂^3+Œ∂^2- Œ∂-1)/4

# ‚àÇN/‚àÇŒ∂                        ‚àÇN/‚àÇx=‚àÇN/‚àÇŒ∂/L
B‚Çê‚ÇÅ(Œ∂) = -1         
B‚Çê‚ÇÇ(Œ∂) =  1
# ‚àÇ¬≤N/‚àÇŒ∂¬≤                      ‚àÇ¬≤N/‚àÇx¬≤=‚àÇ¬≤N/‚àÇŒ∂¬≤/L¬≤
B·µ§‚ÇÅ(Œ∂) =   72Œ∂   /4
B·µ§‚ÇÇ(Œ∂) =  -72Œ∂   /4
B·µ•‚ÇÅ(Œ∂) = ( 72Œ∂-8)/4
B·µ•‚ÇÇ(Œ∂) = ( 72Œ∂+8)/4

struct EulerBeam3D{Mat} <: AbstractElement
    c‚Çò       :: SVector{3,ùï£} 
    r‚Çò       :: Mat33{ùï£}  
    Œ∂gp      :: SVector{ngp,ùï£}
    Œ∂nod     :: SVector{nnod,ùï£}
    tg‚Çò      :: SVector{ndim,ùï£} 
    tg‚Çë      :: SVector{ndim,ùï£} 
    NŒµ       :: SVector{ngp,SVector{     ndof,ùï£}}
    NŒ∫       :: SVector{ngp,SMatrix{ndim,ndof,ùï£,ndim*ndof}}
    Nu       :: SVector{ngp,SMatrix{ndim,ndof,ùï£,ndim*ndof}}
    dL       :: SVector{ngp,ùï£}
    mat      :: Mat
end
Muscade.doflist(::Type{<:EulerBeam3D}) = (inod = (1,1,1,1,1,1, 2,2,2,2,2,2), class= ntuple(i->:X,ndof), field= (:t1,:t2,:t3,:r1,:r2,:r3, :t1,:t2,:t3,:r1,:r2,:r3) )

function EulerBeam3D(nod::Vector{Node};mat,orient2::SVector{ndim,ùï£}=SVector(0.,1.,0.)) 
    c       = coord(nod)
    c‚Çò      = SVector{ndim}((c[1]+c[2])/2)
    tg‚Çò     = SVector{ndim}( c[2]-c[1]   )
    L       = norm(tg‚Çò)
    t       = tg‚Çò/L
    orient2/= norm(orient2)
    n       = orient2 - t*dot(orient2,t) 
    nn      = norm(n) 
    nn>1e-3 || muscadeerror("Provide a 'orient' input that is not nearly parallel to the element")
    n      /= nn
    b       = cross(t,n)
    r‚Çò      = SMatrix{ndim,ndim}(t...,n...,b...)
    tg‚Çë     = SVector{ndim}(L,0,0)
    dL      = SVector{ngp }(L/2   , L/2 )
    Œ∂gp     = SVector{ngp }(-1/2‚àö3,1/2‚àö3) # Œ∂‚àà[-1/2,1/2]
    Œ∂nod    = SVector{ngp }(-1/2  ,1/2  ) # Œ∂‚àà[-1/2,1/2]
    L¬≤      = L^2
    NŒµ      = SVector{ngp}(@SVector [B‚Çê‚ÇÅ(Œ∂·µ¢)/L,0,         0,         0,         0,          0,         B‚Çê‚ÇÇ(Œ∂·µ¢)/L,0,         0,          0,          0,          0         ] for Œ∂·µ¢‚ààŒ∂gp)  # NŒµ[igp][idof]
    NŒ∫      = SVector{ngp}(@SMatrix [0         0          0          B‚Çê‚ÇÅ(Œ∂·µ¢)/L  0           0          0         0          0           B‚Çê‚ÇÇ(Œ∂·µ¢)/L   0           0         ;
                                     0         B·µ§‚ÇÅ(Œ∂·µ¢)/L¬≤ 0          0          0           B·µ•‚ÇÅ(Œ∂·µ¢)/L¬≤ 0         B·µ§‚ÇÇ(Œ∂·µ¢)/L¬≤ 0           0           0           B·µ•‚ÇÇ(Œ∂·µ¢)/L¬≤;
                                     0         0          B·µ§‚ÇÅ(Œ∂·µ¢)/L¬≤ 0          -B·µ•‚ÇÅ(Œ∂·µ¢)/L¬≤ 0          0         0          B·µ§‚ÇÇ(Œ∂·µ¢)/L¬≤  0           -B·µ•‚ÇÇ(Œ∂·µ¢)/L¬≤  0         ] for Œ∂·µ¢‚ààŒ∂gp) # NŒ∫[igp][idim,idof]
    Nu      = SVector{ngp}(@SMatrix [N‚Çê‚ÇÅ(Œ∂·µ¢)   0          0          0          0           0          N‚Çê‚ÇÇ(Œ∂·µ¢)   0          0           0           0           0         ;
                                     0         N·µ§‚ÇÅ(Œ∂·µ¢)    0          0          0           N·µ•‚ÇÅ(Œ∂·µ¢)    0         N·µ§‚ÇÇ(Œ∂·µ¢)    0           0           0           N·µ•‚ÇÇ(Œ∂·µ¢)   ;
                                     0         0          N·µ§‚ÇÅ(Œ∂·µ¢)    0          -N·µ•‚ÇÅ(Œ∂·µ¢)    0          0         0          N·µ§‚ÇÇ(Œ∂·µ¢)     0           -N·µ•‚ÇÇ(Œ∂·µ¢)    0         ] for Œ∂·µ¢‚ààŒ∂gp) # Nu[igp][idim,idof]
    return EulerBeam3D(c‚Çò,r‚Çò,Œ∂gp,Œ∂nod,tg‚Çò,tg‚Çë,NŒµ,NŒ∫,Nu,dL,mat)
end
const saco = StaticArrays.sacollect
const v3   = SVector{3}
@espy function Muscade.residual(o::EulerBeam3D,   X,U,A,t,SP,dbg) 
    c‚Çò,r‚Çò,tg‚Çò,tg‚Çë     = o.c‚Çò,o.r‚Çò,o.tg‚Çò,o.tg‚Çë
    NŒµ,NŒ∫,Nu         = o.NŒµ,o.NŒ∫,o.Nu
    Œ∂gp,Œ∂nod,dL      = o.Œ∂gp,o.Œ∂nod,o.dL
    P                = constants(X,U,A,t)  
    ŒîX               = variate{P,ndof}(‚àÇ0(X))
    u·µß‚ÇÅ,v·µß‚ÇÅ,u·µß‚ÇÇ,v·µß‚ÇÇ  = SVector{3}(ŒîX[i] for i‚àà1:3), SVector{3}(ŒîX[i] for i‚àà4:6),SVector{3}(ŒîX[i] for i‚àà7:9),SVector{3}(ŒîX[i] for i‚àà10:12)
    c‚Çõ               = (u·µß‚ÇÅ+u·µß‚ÇÇ)/2
    r‚Çõ               = Rodrigues((v·µß‚ÇÅ+v·µß‚ÇÇ)/2)
    r‚Çõ               = Rodrigues(adjust(r‚Çõ‚àòtg‚Çò,tg‚Çò+u·µß‚ÇÇ-u·µß‚ÇÅ))‚àòr‚Çõ   
    r‚Çõ‚Çò              = r‚Çõ‚àòr‚Çò
    u‚Çó‚ÇÅ              = r‚Çõ‚Çò'‚àò(u·µß‚ÇÅ+tg‚Çò*Œ∂nod[1]-c‚Çõ)-tg‚Çë*Œ∂nod[1]
    u‚Çó‚ÇÇ              = r‚Çõ‚Çò'‚àò(u·µß‚ÇÇ+tg‚Çò*Œ∂nod[2]-c‚Çõ)-tg‚Çë*Œ∂nod[2]
    v‚Çó‚ÇÅ              = Rodrigues‚Åª¬π(r‚Çõ‚Çò'‚àòRodrigues(v·µß‚ÇÅ)‚àòr‚Çò)
    v‚Çó‚ÇÇ              = Rodrigues‚Åª¬π(r‚Çõ‚Çò'‚àòRodrigues(v·µß‚ÇÇ)‚àòr‚Çò)
    Œ¥X‚Çó,T            = value_‚àÇ{P,ndof}(SVector(u‚Çó‚ÇÅ...,v‚Çó‚ÇÅ...,u‚Çó‚ÇÇ...,v‚Çó‚ÇÇ...))
    gp              = ntuple(ngp) do igp
        ‚òºŒµ,‚òºŒ∫,‚òºu‚Çó    = NŒµ[igp]‚àòŒ¥X‚Çó, NŒ∫[igp]‚àòŒ¥X‚Çó, Nu[igp]‚àòŒ¥X‚Çó   # axial strain, curvatures, displacement - all local
        ‚òºx          = r‚Çõ‚Çò‚àò(tg‚Çë*Œ∂gp[igp]+u‚Çó)+c‚Çõ+c‚Çò             # [ndim], global coordinates
        f‚ÇÅ,m,f‚Çë     = ‚òºresultants(o.mat,Œµ,Œ∫,x,r‚Çõ‚Çò)  # NB: f‚Çë is in local coordinates
        R‚Çó           = (f‚ÇÅ ‚àò‚ÇÄ NŒµ[igp] + m‚àòNŒ∫[igp] + f‚Çë‚àòNu[igp])*dL[igp]     # [ndof] = scalar*[ndof] + [ndim]‚ãÖ[ndim,ndof] + [ndim]‚ãÖ[ndim,ndof]
        @named(R‚Çó)
    end
    R  = sum(gp·µ¢.R‚Çó for gp·µ¢‚ààgp) ‚àò T
    return R,noFB
end

