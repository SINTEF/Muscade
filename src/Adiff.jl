using   StaticArrays
using   SpecialFunctions
using   Printf


## Type and construction
const SV = SVector  
const SA = SArray 
const SM = SMatrix
# Types
# P precedence.  Newer, derivatives, outest in the adiff datastructure have higher numbers  
# N number of partials 
# R type of the variable  (and partials)
struct ‚àÇ‚Ñù{P,N,R} <:‚Ñù where{R<:‚Ñù}  # P for precedence, N number of partials, R type of the variable (‚àÇ‚Ñù can be nested)
    x  :: R
    dx :: SV{N,R}
end

# Constructors 
‚àÇ‚Ñù{P,N  }(x::R ,dx::SV{N,R}) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(x   ,SV{N,R}(dx))
‚àÇ‚Ñù{P,N  }(x::R             ) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(x   ,SV{N,R}(zero(R)                 for j=1:N))
‚àÇ‚Ñù{P,N  }(x::R,i::‚Ñ§        ) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(x   ,SV{N,R}(i==j ? one(R) : zero(R) for j=1:N))
‚àÇ‚Ñù{P,N,R}(x::ùï£             ) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(R(x),SV{N,R}(zero(R)                 for j=1:N))
function ‚àÇ‚Ñù{P,N}(x::Rx,dx::SV{N,Rdx}) where{P,N,Rx<:‚Ñù,Rdx<:‚Ñù}
    R = promote_type(Rx,Rdx)
    return ‚àÇ‚Ñù{P,N}(convert(R,x),convert.(R,dx))
end

# zeros, ones
Base.zero(::Type{‚àÇ‚Ñù{P,N,R}}) where{P,N,R<:‚Ñù}     = ‚àÇ‚Ñù{P,N,R}(zero(R), SV{N,R}(zero(R) for j=1:N))
Base.one( ::Type{‚àÇ‚Ñù{P,N,R}}) where{P,N,R<:‚Ñù}     = ‚àÇ‚Ñù{P,N,R}(one( R), SV{N,R}(zero(R) for j=1:N))
Base.isnan(   a::‚àÇ‚Ñù)                             = isnan(   VALUE(a))
Base.isone(   a::‚àÇ‚Ñù)                             = isone(   VALUE(a))
Base.iszero(  a::‚àÇ‚Ñù)                             = iszero(  VALUE(a))
Base.isinf(   a::‚àÇ‚Ñù)                             = isinf(   VALUE(a))
Base.isfinite(a::‚àÇ‚Ñù)                             = isfinite(VALUE(a))
Base.typemax( ::Type{‚àÇ‚Ñù{P,N,R}}) where{P,N,R<:‚Ñù} = typemax(R)
Base.typemin( ::Type{‚àÇ‚Ñù{P,N,R}}) where{P,N,R<:‚Ñù} = typemin(R)
Base.floatmax(::Type{‚àÇ‚Ñù{P,N,R}}) where{P,N,R<:‚Ñù} = floatmax(R)
Base.floatmin(::Type{‚àÇ‚Ñù{P,N,R}}) where{P,N,R<:‚Ñù} = floatmin(R)
Base.floatmax(::     ‚àÇ‚Ñù{P,N,R} ) where{P,N,R<:‚Ñù} = floatmax(R)  # because ‚Ñù is Real, not AbstractFloat
Base.floatmin(::     ‚àÇ‚Ñù{P,N,R} ) where{P,N,R<:‚Ñù} = floatmin(R)  # because ‚Ñù is Real, not AbstractFloat
Base.eps(     ::Type{‚àÇ‚Ñù{P,N,R}}) where{P,N,R<:‚Ñù} = eps(R)
Base.float(a::‚àÇ‚Ñù)                                = a

# promote rules
Base.promote_rule(::Type{‚àÇ‚Ñù{P ,N ,Ra}},::Type{‚àÇ‚Ñù{P,N,Rb}}) where{P ,N ,Ra<:‚Ñù,Rb<:‚Ñù} = ‚àÇ‚Ñù{P ,N ,promote_type(Ra,Rb)}
Base.promote_rule(::Type{‚àÇ‚Ñù{Pa,Na,Ra}},::Type{       Rb }) where{Pa,Na,Ra<:‚Ñù,Rb<:‚Ñù} = ‚àÇ‚Ñù{Pa,Na,promote_type(Ra,Rb)}
function Base.promote_rule(::Type{‚àÇ‚Ñù{Pa,Na,Ra}},::Type{‚àÇ‚Ñù{Pb,Nb,Rb}}) where{Pa,Pb,Na,Nb,Ra<:‚Ñù,Rb<:‚Ñù}
    if  Pa>Pb ‚àÇ‚Ñù{Pa,Nb,promote_type(      Ra    ,‚àÇ‚Ñù{Pb,Nb,Rb})}
    else      ‚àÇ‚Ñù{Pb,Nb,promote_type(‚àÇ‚Ñù{Pa,Na,Ra},      Rb    )}
    end
end

# conversions
Base.convert(::Type{‚àÇ‚Ñù{P,N,Ra}},b::‚àÇ‚Ñù{P,N,Rb}) where{P,N,Ra<:‚Ñù,Rb<:‚Ñù} = ‚àÇ‚Ñù{P ,N }(convert(Ra,b.x) ,convert.(Ra,b.dx))
Base.convert(::Type{‚àÇ‚Ñù{P,N,Ra}},b::‚Ñù         ) where{P,N,Ra<:‚Ñù      } = ‚àÇ‚Ñù{P ,N }(convert(Ra,b  ) ,SV{N,Ra}(zero(Ra) for j=1:N))
function Base.convert(::Type{‚àÇ‚Ñù{Pa,Na,Ra}},b::‚àÇ‚Ñù{Pb,Nb,Rb}) where{Pa,Pb,Na,Nb,Ra<:‚Ñù,Rb<:‚Ñù}
    if Pa> Pb return                                                    ‚àÇ‚Ñù{Pa,Na}(convert(Ra,b.x) ,convert.(Ra,b.dx))
    else      muscadeerror(printf("Cannot convert precedence ",Pb," to ",Pa))
    end
end

# Pack and unpack
precedence( ::Type{<:‚àÇ‚Ñù{P,N,R}}) where{P,N,R<:‚Ñù}          = P
npartial(   ::Type{<:‚àÇ‚Ñù{P,N,R}}) where{P,N,R<:‚Ñù}          = N
precedence( ::Type{<:‚Ñù})                                  = 0
npartial(   ::Type{<:‚Ñù})                                  = 0
precedence(a::SA)     = precedence(eltype(a))
npartial(  a::SA)     = npartial(eltype(a))
precedence(a::‚Ñù)      = precedence(typeof(a))
npartial(  a::‚Ñù)      = npartial(typeof(a))
constants(tup::Tuple) = constants(tup...) 
constants( a,args...) = max(constants(a),constants(args...))
constants( a)         = 1+precedence(a) 
constants( ::Nothing) = 0

# variate
struct Œ¥{P,N,R}                end # need dum, because syntax Œ¥{P,N,R}() collides with default constructor
struct variate{P,N}            end
struct directional{P,N}        end 
Œ¥{P,N,R}(                          ) where{P,N,R<:‚Ñù} = SV{N,‚àÇ‚Ñù{P,N,R}}(‚àÇ‚Ñù{P,N  }(zero(R),i                                         ) for i=1:N)
Œ¥{P,N,R}(               Œ¥a::SV{N,ùï£}) where{P,N,R<:‚Ñù} = SV{N,‚àÇ‚Ñù{P,N,R}}(‚àÇ‚Ñù{P,N,R}(zero(R),SV{N,R}(i==j ? Œ¥a[i]  : zero(R) for i=1:N)) for j=1:N)


#variate{P,N}(a::SV{N,R}            ) where{P,N,R<:‚Ñù} = SV{N,‚àÇ‚Ñù{P,N,R}}(‚àÇ‚Ñù{P,N  }(a[i]   ,i                                         ) for i=1:N)
variate{P,N}(a::SV{N,R}            ) where{P,N,R<:‚Ñù} = SV{N,‚àÇ‚Ñù{P,N,R}}(‚àÇ‚Ñù{P,N  }(a[i],i) for i=1:N)


variate{P,N}(a::SV{N,R},Œ¥a::SV{N,ùï£}) where{P,N,R<:‚Ñù} = SV{N,‚àÇ‚Ñù{P,N,R}}(‚àÇ‚Ñù{P,N,R}(a[j]   ,SV{N,R}(i==j ? R(Œ¥a[i])  : zero(R) for i=1:N)) for j=1:N)

variate{P}(a::R) where{P,R<:‚Ñù} =  ‚àÇ‚Ñù{P,1}(a,SV{1,R}(one(R)))
directional{P}(a::SV{N,R},Œ¥a::SV{N,R}) where{P,N,R<:‚Ñù} = SV{N,‚àÇ‚Ñù{P,1,R}}(‚àÇ‚Ñù{P,1}(a[i],SV{1,R}(Œ¥a[i])) for i=1:N)

# Analyse
VALUE(a::Nothing )                     =        nothing
VALUE(a::‚Ñù )                           =        a
VALUE(a::‚àÇ‚Ñù)                           = VALUE( a.x)
VALUE(a::SA)                           = VALUE.(a)

struct ‚àÇ{P,N}                  end 
struct value{P,N}              end
struct value_‚àÇ{P,N}            end

value{P}(a::‚àÇ‚Ñù{P,N,R}) where{P,N,R   } = a.x
value{P}(a::R        ) where{P  ,R<:‚Ñù} = a
value{P}(a::SA       ) where{P       } = value{P}.(a)

# ‚àÇ{P}(a) is handled as ‚àÇ{P,1}(a) and returns a scalar 
‚àÇ{P,N}(a::     ‚àÇ‚Ñù{P,N,R} ) where{  P,N,R   } = a.dx
‚àÇ{P,N}(a::            R  ) where{  P,N,R<:‚Ñù} = SV{  N,R}(zero(R)    for i=1:N      )
‚àÇ{P,N}(a::SV{M,‚àÇ‚Ñù{P,N,R}}) where{M,P,N,R   } = SM{M,N,R}(a[i].dx[j] for i=1:M,j‚àà1:N) # ‚àÇ(a,x)[i,j] = ‚àÇa[i]/‚àÇx[j]
‚àÇ{P,N}(a::SV{M,       R }) where{M,P,N,R   } = SM{M,N,R}(zero(R)    for i=1:M,j=1:N)
‚àÇ{P  }(a::            R  ) where{  P,  R<:‚Ñù} = zero(R)
‚àÇ{P  }(a::     ‚àÇ‚Ñù{P,1,R} ) where{  P,  R   } = a.dx[1]
‚àÇ{P  }(a::SV{N,‚àÇ‚Ñù{P,1,R}}) where{  P,N,R   } = SV{  N,R}(a[i].dx[1] for i=1:N     ) # ‚àÇ(a,x)[i]    = ‚àÇa[i]/‚àÇx
#‚àÇ{P,N}(a::SA{M,‚àÇ‚Ñù{P,N,R}}) where{M,P,N,R}  = SA{(M...,N),R}(a[i].dx[j] for i‚ààeachindex(a),j‚àà1:N) # ‚àÇ(a,x)[i,...,j] = ‚àÇa[i,...]/‚àÇx[j]
#‚àÇ{P,N}(a::SA{M,       R }) where{M,P,N,R}  = SA{(M...,N),R}(zero(R)    for i‚ààeachindex(a),j‚àà1:N)

value_‚àÇ{P,N}(a) where{  P,N}= value{P}(a),‚àÇ{P,N}(a)
value_‚àÇ{P  }(a) where{  P  }= value{P}(a),‚àÇ{P  }(a)

## Binary operations
for OP‚àà(:(>),:(<),:(==),:(>=),:(<=),:(!=))
    @eval Base.$OP(a::‚àÇ‚Ñù,b::‚àÇ‚Ñù)  = $OP(VALUE(a),VALUE(b))
    @eval Base.$OP(a:: ‚Ñù,b::‚àÇ‚Ñù)  = $OP(      a ,VALUE(b))
    @eval Base.$OP(a::‚àÇ‚Ñù,b:: ‚Ñù)  = $OP(VALUE(a),      b )
end

macro Op2(OP,AB,A,B)
    return esc(quote
        @inline $OP(a::‚àÇ‚Ñù{P,N,R},b::‚àÇ‚Ñù{P,N,R}) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}($OP(a.x,b.x),$AB)
        @inline $OP(a::‚àÇ‚Ñù{P,N,R},b::‚Ñù        ) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}($OP(a.x,b  ),$A )
        @inline $OP(a::‚Ñù        ,b::‚àÇ‚Ñù{P,N,R}) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}($OP(a  ,b.x),$B )
        @inline function $OP(a::‚àÇ‚Ñù{Pa,Na,Ra},b::‚àÇ‚Ñù{Pb,Nb,Rb}) where{Pa,Pb,Na,Nb,Ra<:‚Ñù,Rb<:‚Ñù}
            if Pa==Pb
                R = promote_type(Ra,Rb)
                return ‚àÇ‚Ñù{Pa,Na}(convert(R,$OP(a.x,b.x)),convert.(R,$AB))
            elseif Pa> Pb
                R = promote_type(Ra,typeof(b))
                return ‚àÇ‚Ñù{Pa,Na}(convert(R,$OP(a.x,b  )),convert.(R,$A ))
            else
                R = promote_type(typeof(a),Rb)
                return ‚àÇ‚Ñù{Pb,Nb}(convert(R,$OP(a  ,b.x)),convert.(R,$B ))
            end
        end
    end)
end

@Op2(Base.atan,  (a.dx*b.x+b.dx*a.x)/(a.x^2+b.x^2),          (a.dx*b)/(a.x^2+b^2),  (b.dx*a)/(a^2+b.x^2) )   
@Op2(Base.hypot, (a.dx*a.x+b.dx*b.x)/hypot(a.x,b.x),         a.dx*a.x/hypot(a.x,b), b.dx*b.x/hypot(a,b.x))   
@Op2(Base.:(+),  a.dx+b.dx,                                  a.dx,                  b.dx                 )
@Op2(Base.:(-),  a.dx-b.dx,                                  a.dx,                  -b.dx                )
@Op2(Base.:(*),  a.dx*b.x+a.x*b.dx,                          a.dx*b,                a*b.dx               )
@Op2(Base.:(/),  a.dx/b.x-a.x/b.x^2*b.dx,                    a.dx/b,                -a/b.x^2*b.dx        ) 
@Op2(Base.:(^),  a.dx*b.x*a.x^(b.x-1)+log(a.x)*a.x^b.x*b.dx, a.dx*b*a.x^(b  -1),    log(a)*a ^b.x*b.dx   )
@inline Base.:(^)(a::‚àÇ‚Ñù{P,N,R},b::Integer) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(a.x^b ,a.dx*b*a.x^(b-1) )

## Functions
macro Op1(OP,A)
    return esc(:(@inline $OP(a::‚àÇ‚Ñù{P,N}) where{P,N} = ‚àÇ‚Ñù{P,N}($OP(a.x),$A)))
end
@Op1(Base.:(+),       a.dx                                                     )
@Op1(Base.:(-),      -a.dx                                                     )
@Op1(Base.abs  ,a.x==0.0 ? zero(a.dx) : (a.x>0.0 ? a.dx : -a.dx)               )
@Op1(Base.conj ,      a.dx                                                     )
@Op1(Base.sqrt,       a.dx / 2. / sqrt(a.x)                                    )
@Op1(Base.cbrt,       a.dx / 3. / cbrt(a.x)^2                                  )
@Op1(Base.abs2,       a.dx*2. * a.x                                            )
@Op1(Base.inv,       -a.dx * abs2(inv(a.x))                                    )
@Op1(Base.log,        a.dx / a.x                                               )
@Op1(Base.log10,      a.dx / a.x / log(10.)                                    )
@Op1(Base.log2,       a.dx / a.x / log(2.)                                     )
@Op1(Base.log1p,      a.dx / (a.x + 1.)                                        )
@Op1(Base.exp,         exp(a.x) * a.dx                                         )
@Op1(Base.exp2,        log(2. ) * exp2( a.x) * a.dx                            )
@Op1(Base.exp10,       log(10.) * exp10(a.x) * a.dx                            )
@Op1(Base.expm1,       exp(a.x) * a.dx                                         )
@Op1(Base.sin,         cos(a.x) * a.dx                                         )
@Op1(Base.cos,        -sin(a.x) * a.dx                                         )
@Op1(Base.tan,         (1. + tan(a.x)^2) * a.dx                                )
@Op1(Base.sinpi,       œÄ*cos(a.x) * a.dx                                       )
@Op1(Base.cospi,      -œÄ*sin(a.x) * a.dx                                       )
@Op1(Base.sec,         sec(a.x) * tan(a.x) * a.dx                              )
@Op1(Base.csc,        -csc(a.x) * cot(a.x) * a.dx                              )
@Op1(Base.cot,        -(1. + cot(a.x)^2) * a.dx                                )
@Op1(Base.sind,        œÄ / 180. * cosd(a.x) * a.dx                             )
@Op1(Base.cosd,       -œÄ / 180. * sind(a.x) * a.dx                             )
@Op1(Base.tand,        œÄ / 180. * (1. + tand(a.x)^2) * a.dx                    )
@Op1(Base.secd,        œÄ / 180. * secd(a.x) * tand(a.x) * a.dx                 )
@Op1(Base.cscd,       -œÄ / 180. * cscd(a.x) * cotd(a.x) * a.dx                 )
@Op1(Base.cotd,       -œÄ / 180. * (1. + cotd(a.x)^2)  * a.dx                   )
@Op1(Base.asin,        a.dx / sqrt(1. - a.x^2)                                 )
@Op1(Base.acos,       -a.dx / sqrt(1. - a.x^2)                                 )
@Op1(Base.atan,        a.dx / (1. + a.x^2)                                     )
@Op1(Base.asec,        a.dx / abs(a.x) / sqrt(a.x^2 - 1.)                      )
@Op1(Base.acsc,       -a.dx / abs(a.x) / sqrt(a.x^2 - 1.)                      )
@Op1(Base.acot,       -a.dx / (1. + a.x^2)                                     )
@Op1(Base.asind,       180. / œÄ / sqrt(1. - a.x^2) * a.dx                      )
@Op1(Base.acosd,      -180. / œÄ / sqrt(1. - a.x^2) * a.dx                      )
@Op1(Base.atand,       180. / œÄ / (1. + a.x^2) * a.dx                          )
@Op1(Base.asecd,       180. / œÄ / abs(a.x) / sqrt(a.x^2- 1.) * a.dx            )
@Op1(Base.acscd,      -180. / œÄ / abs(a.x) / sqrt(a.x^2- 1.) * a.dx            )
@Op1(Base.acotd,      -180. / œÄ / (1. + a.x^2) * a.dx                          )
@Op1(Base.sinh,        cosh(a.x) * a.dx                                        )
@Op1(Base.cosh,        sinh(a.x) * a.dx                                        )
@Op1(Base.tanh,        sech(a.x)^2 * a.dx                                      )
@Op1(Base.sech,       -tanh(a.x) * sech(a.x) * a.dx                            )
@Op1(Base.csch,       -coth(a.x) * csch(a.x) * a.dx                            )
@Op1(Base.coth,       -csch(a.x)^2                                             )
@Op1(Base.asinh,       a.dx / sqrt(a.x^2 + 1.)                                 )
@Op1(Base.acosh,       a.dx / sqrt(a.x^2 - 1.)                                 )
@Op1(Base.atanh,       a.dx / (1. - a.x^2)                                     )
@Op1(Base.asech,      -a.dx / a.x / sqrt(1. - a.x^2)                           )
@Op1(Base.acsch,      -a.dx / abs(a.x) / sqrt(1. + a.x^2)                      )
@Op1(Base.acoth,       a.dx / (1. - a.x^2)                                     )
@Op1(SpecialFunctions.erf,         2. * exp(-a.x^2) / sqrt(œÄ) * a.dx           )
@Op1(SpecialFunctions.erfc,       -2. * exp(-a.x^2) / sqrt(œÄ) * a.dx           )
@Op1(SpecialFunctions.erfi,        2. * exp( a.x^2) / sqrt(œÄ) * a.dx           )
@Op1(SpecialFunctions.gamma,       digamma(a.x) * gamma(a.x) * a.dx            )
@Op1(SpecialFunctions.lgamma,      digamma(a.x) * a.dx                         )
@Op1(SpecialFunctions.airy,        airyprime(a.x) * a.dx                       )  # note: only covers the 1-arg version
@Op1(SpecialFunctions.airyprime,   airy(2., a.x) * a.dx                        )
@Op1(SpecialFunctions.airyai,      airyaiprime(a.x) * a.dx                     )
@Op1(SpecialFunctions.airybi,      airybiprime(a.x) * a.dx                     )
@Op1(SpecialFunctions.airyaiprime, a.x * airyai(a.x) * a.dx                    )
@Op1(SpecialFunctions.airybiprime, a.x * airybi(a.x) * a.dx                    )
@Op1(SpecialFunctions.besselj0,   -besselj1(a.x) * a.dx                        )
@Op1(SpecialFunctions.besselj1,   (besselj0(a.x) - besselj(2., a.x))/2. * a.dx )
@Op1(SpecialFunctions.bessely0,   -bessely1(a.x) * a.dx                        )
@Op1(SpecialFunctions.bessely1,   (bessely0(a.x) - bessely(2., a.x))/2. * a.dx )

## Comparison for debug purposes
‚âó(a::‚Ñù,b::‚Ñù)                 = (typeof(a)==typeof(b)) && ((a-b) < 1e-10*max(1,a+b))
‚âó(a::SA,b::SA)               = (size(a)==size(b)) && all(a .‚âó b)
‚âó(a::‚àÇ‚Ñù,b::‚àÇ‚Ñù)               = (typeof(a)==typeof(b)) && (a.x ‚âó b.x) && (a.dx ‚âó b.dx)

## Find NaN in derivatives
hasnan(a::‚Ñù   )              = isnan(a)
hasnan(a::‚àÇ‚Ñù   )             = hasnan(a.x) || hasnan(a.dx)
hasnan(a::AbstractArray)     = any(hasnan.(a))
hasnan(a::Tuple)             = any(hasnan.(a))
hasnan(a::NamedTuple)        = any(hasnan.(values(a)))
hasnan(a...;)                = any(hasnan.(a))
hasnan(a)                    = false

# cast: like `convert` but never throws an `inexact error` - and indeed willfully looses data if so asked
cast( ::Type{T}        ,a::T) where{T    } = a
cast(T::Type{‚àÇ‚Ñù{P,N,R}},a::ùï£) where{P,N,R} = ‚àÇ‚Ñù{P,N,R}(cast(R,a),SV{N,R}(zero(R) for j=1:N))
cast(T::Type{ùï£}        ,a::‚Ñù)              = VALUE(a)
function cast(T::Type{‚àÇ‚Ñù{PT,NT,RT}},a::‚àÇ‚Ñù{Pa,Na,Ra}) where{PT,NT,RT,Pa,Na,Ra}
    R = promote_type(RT,Ra)
    return if PT==Pa   ‚àÇ‚Ñù{Pa,Na}(cast(R ,a.x),cast.(R,a.dx)                 )
    elseif    PT> Pa   ‚àÇ‚Ñù{PT,NT}(cast(RT,a  ),SV{NT,RT}(zero(RT) for j=1:NT))
    else                         cast(T ,a.x)
    end
end

