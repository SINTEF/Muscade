function makepattern(out) 
    L2(Œ±,Œ≤) = out.L2[Œ±,Œ≤][1,1]
    Œ±       = [2,3,1,2,3,1,2,3]  #   [0 . .]
    Œ≤       = [1,1,2,2,2,3,3,3]  #   [. . .]
    return sparse(Œ±,Œ≤,L2.(Œ±,Œ≤))  # = [. . .]
end

function assemblebigmat!(L2::Vector{Sparseùï£2},L2bigasm,asm,model,dis,out::AssemblyDirect{OX,OU,0},dbg) where{OX,OU}
    # does not call assemble!: solve has previously called assemble! to prepare bigasm, so out.L2 is already set,
    zero!.(L2)
    for     Œ± ‚àà Œªxu 
        for Œ≤ ‚àà Œªxu
            LŒ±Œ≤ = out.L2[Œ±,Œ≤]
            for     Œ±der = 1:size(LŒ±Œ≤,1)
                for Œ≤der = 1:size(LŒ±Œ≤,2)
                    ider =  Œ±der+Œ≤der-1   
                    sgn  = isodd(Œ±der) ? +1 : -1 
                    addin!(L2bigasm,L2[ider],LŒ±Œ≤[Œ±der,Œ≤der],Œ±,Œ≤,sgn) 
                end
            end
        end
    end
end
function assemblebigvec!(L1::Vector{ùï£1},L1bigasm,asm,model,dis,out::AssemblyDirect{OX,OU,0},state,dbg) where{OX,OU}
    zero!.(L1)
    out.matrices = false
    assemble!(out,asm,dis,model,state,(dbg...,asm=:assemblebigmat!))
    for Œ≤ ‚àà Œªxu
        LŒ≤ = out.L1[Œ≤]
        for Œ≤der = 1:size(LŒ≤,1)
            addin!(L2bigasm,L1[ider],LŒ≤[Œ≤der],Œ≤,scale) 
        end
    end
end
"""
	FreqXU{OX,OU}

"""
struct FreqXU{OX,OU} <: AbstractSolver end 

function solve(::Type{FreqXU{OX,OU}},pstate,verbose::ùïì,dbg;
    Œît::ùï£, p::ùï´, t‚ÇÄ::ùï£=0.,t·µ£::ùï£=t‚ÇÄ, 
    initialstate::State,
    fastresidual::ùîπ=false,
    kwargs...) where{OX,OU}

    #  Mostly constants
    local LU
    #nder                  = (1,OX+1,OU+1)
    model,dis             = initialstate.model, initialstate.dis
    nstep                 = 2^p
    time                  = range(;start=t‚ÇÄ,step=Œît,length=nstep)
    IA                    = 0

    # State storage
    S                     = State{1,OX+1,OU+1,Nothing}
    pstate[] = state      = Vector{S}(undef,nstep)                                                                           
    state·µ£                = State{1,OX+1,OU+1}(copy(initialstate,time=t·µ£))   

    for (step,time·µ¢)      = enumerate(time)
        state[step]       = State(time·µ¢,deepcopy(state·µ£.Œõ),deepcopy(state·µ£.X),deepcopy(state·µ£.U),state·µ£.A,nothing,state·µ£.model,state·µ£.dis)
    end
    L2                    = Vector{Sparseùï£2}(undef,5)

    # Prepare assembler
    verbose && @printf("\n    Preparing assembler\n")
    out,asm,dofgr         = prepare(AssemblyDirect{OX,OU,IA},model,dis;fastresidual,kwargs...)   # model assembler for all arrays   
    assemble!(out,asm,dis,model,state·µ£,(dbg...,solver=:FreqXU,phase=:matrices))            # assemble all model matrices - in class-blocks
    pattern               = makepattern(out)
    L2[1],L2bigasm,L1bigasm,L1dis  = prepare(pattern)                                            
    for ider = 2:5
        L2[ider] = copy(L2[1])
    end    
    assemblebigmat!(L2,L2bigasm,asm,model,dis,out,(dbg...,solver=:FreqXU))              # assemble all model matrices, no blocks

    # out.matrices = false
    # for (step,time·µ¢)‚ààenumerate(time)
    #     assemble!(out,asm,dis,model,state[step],(dbg...,solver=:FreqXU,phase=:matrices))

    @show L2[1]
    @show L2[2]
    @show L2[3]
    @show L2[4]
    @show L2[5]


        # try 
        #     if iter==1 LU = lu(Lvv) 
        #     else       lu!(LU ,Lvv)
        #     end 
        # catch 
        #     verbose && @printf("\n")
        #     muscadeerror(@sprintf("Lvv matrix factorization failed at iter=%i",iter));
        # end
        # Œîv               = LU\Lv # use ldiv! to save allocation

        # decrementbigmat!(state,Œî¬≤,Lvdis,dofgr,Œîv,nder,Œît,nstep)

    return
end


