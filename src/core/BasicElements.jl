struct Xclass end
struct Uclass end
struct Aclass end
Base.Symbol(::Type{Xclass}) = :X
Base.Symbol(::Type{Uclass}) = :U
Base.Symbol(::Type{Aclass}) = :A

#-------------------------------------------------

struct DofCost{Derivative,Class,Field,Tcost} <: AbstractElement
    cost :: Tcost # Function 
end
DofCost(nod::Vector{Node};class::DataType,field::Symbol,cost::Tcost,derivative=0::ùï´) where{Tcost<:Function} = DofCost{derivative,class,field,Tcost}(cost)
doflist(::Type{<:DofCost{Derivative,Class,Field}}) where{Derivative,Class,Field} = (inod =(1,), class=(Symbol(Class),), field=(Field,))
espyable(::Type{<:DofCost}) = (J=scalar,)
@espy function lagrangian(o::DofCost{Derivative,Xclass}, Œ¥X,X,U,A, t,Œµ,dbg) where{Derivative}
    :J = o.cost(‚àÇn(X,Derivative)[1],t)
    return J
end
@espy function lagrangian(o::DofCost{Derivative,Uclass}, Œ¥X,X,U,A, t,Œµ,dbg) where{Derivative}
    :J = o.cost(‚àÇn(U,Derivative)[1],t)
    return J
end
@espy function lagrangian(o::DofCost{Derivative,Aclass}, Œ¥X,X,U,A, t,Œµ,dbg) where{Derivative}
    :J = o.cost(A[1])
    return J
end

#-------------------------------------------------

struct DofLoad{Tvalue,Field} <: AbstractElement
    value      :: Tvalue # Function
end
DofLoad(nod::Vector{Node};field::Symbol,value::Tvalue) where{Tvalue<:Function} = DofLoad{Tvalue,field}(value)
doflist(::Type{DofLoad{Tvalue,Field}}) where{Tvalue,Field}=(inod=(1,), class=(:X,), field=(Field,))
@espy function residual(o::DofLoad, X,U,A, t,Œµ,dbg) 
    :F = o.value(t)
    return SVector{1}(-F)
end
espyable(::Type{<:DofLoad}) = (F=scalar,)

#-------------------------------------------------

slack(g,Œª,Œ≥) = (g+Œª)/2-hypot(Œ≥,(g-Œª)/2) # Modified interior point method's take on KKT's-complementary slackness 

KKT(      g,Œª,Œ≥) = g*Œª # A pseudo potential
KKT(g::‚àÇ‚Ñù{P,N,R},Œª::‚àÇ‚Ñù{P,N,R},Œ≥::ùï£) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(KKT(g.x,Œª.x,Œ≥) , Œª.x*g.dx + slack(g.x,Œª.x,Œ≥)*Œª.dx)
KKT(g::‚àÇ‚Ñù{P,N,R},Œª:: ‚Ñù       ,Œ≥::ùï£) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(KKT(g.x,Œª  ,Œ≥) , Œª  *g.dx                            )
KKT(g:: ‚Ñù       ,Œª::‚àÇ‚Ñù{P,N,R},Œ≥::ùï£) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(KKT(g  ,Œª.x,Œ≥) ,            slack(g  ,Œª.x,Œ≥)*Œª.dx)
function KKT(a::‚àÇ‚Ñù{Pa,Na,Ra},b::‚àÇ‚Ñù{Pb,Nb,Rb},Œ≥::ùï£) where{Pa,Pb,Na,Nb,Ra<:‚Ñù,Rb<:‚Ñù}
    if Pa==Pb
        R = promote_type(Ra,Rb)
        return ‚àÇ‚Ñù{Pa,Na}(convert(R,KKT(g.x,Œª.x,Œ≥)),convert.(R,Œª.x*g.dx + slack(g.x,Œª.x,Œ≥)*Œª.dx))
    elseif Pa> Pb
        R = promote_type(Ra,typeof(b))
        return ‚àÇ‚Ñù{Pa,Na}(convert(R,KKT(g.x,Œª  ,Œ≥)),convert.(R,Œª  *g.dx                            ))
    else
        R = promote_type(typeof(a),Rb)
        return ‚àÇ‚Ñù{Pb,Nb}(convert(R,KKT(g  ,Œª.x,Œ≥)),convert.(R,            slack(g  ,Œª.x,Œ≥)*Œª.dx))
    end
end

#-------------------------------------------------

struct Constraint{Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield,Tg} <: AbstractElement
    g        :: Tg # Function
    equality :: ùïì
end
Constraint(nod::Vector{Node};xinod::NTuple{Nx,ùï´},xfield::NTuple{Nx,Symbol},
                                         uinod::NTuple{Nu,ùï´},ufield::NTuple{Nu,Symbol},
                                         ainod::NTuple{Na,ùï´},afield::NTuple{Na,Symbol},
                                         Œªinod::ùï´, Œªclass::Symbol, Œªfield,
                                         g::Function ,equality::ùïì) where{Nx,Nu,Na} =
                 Constraint{Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield,typeof(g)}(g,equality)
doflist(::Type{<:Constraint{Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield}}) where{Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield} = 
   (inod =(xinod...           ,uinod...           ,ainod...           ,Œªinod ), 
    class=(ntuple(i->:X,Nx)...,ntuple(i->:U,Nu)...,ntuple(i->:A,Na)...,Symbol(Œªclass)), 
    field=(xfield...          ,ufield...          ,afield...          ,Œªfield)) 

@espy function lagrangian(o::Constraint{Xclass,Nx,0,0}, Œ¥X,X,U,A, t,Œµ,dbg) where{Nx}  
    P          = constants(Œ¥X,‚àÇ0(X))
    X‚àÇ         = directional{P}(‚àÇ0(X),Œ¥X) 
    x,Œª        = X‚àÇ[SVector{Nx}(1:Nx)], -X‚àÇ[Nx+1] 
    g          = o.g(x)
    gŒª         = o.equality ? g*Œª : KKT(g,Œª,Œµ)
    return ‚àÇ{P}(gŒª)    # = Œ¥(gŒª) = Œ¥g*Œª+Œ¥Œª*g = Œ¥x‚àò‚àá‚Çìg*Œª+Œ¥Œª*g   
end
@espy function residual(o::Constraint{Xclass,Nx,0,0}, X,U,A, t,Œµ,dbg) where{Nx}
    P          = constants(‚àÇ0(X))
    x,Œª        = ‚àÇ0(X)[SVector{Nx}(1:Nx)], -‚àÇ0(X)[Nx+1]
    x‚àÇ         = variate{P,Nx}(x) 
    g,‚àá‚Çìg      = value_‚àÇ{P,Nx}(o.g(x‚àÇ)) 
    zerothis   = o.equality ? g : slack(g,Œª,Œµ)
    return  SVector{Nx+1}(‚àá‚Çìg*Œª...,zerothis)
end
@espy function lagrangian(o::Constraint{Uclass,Nx,Nu,Na}, Œ¥X,X,U,A, t,Œµ,dbg) where{Nx,Nu,Na}
    x,u,a,Œª    = ‚àÇ0(X),‚àÇ0(U)[SVector{Nu}(1:Nu)],A,-‚àÇ0(U)[Nu+1] 
    g          = o.g(x,u,a)
    return o.equality ? g*Œª : KKT(g,Œª,Œµ) 
end
@espy function lagrangian(o::Constraint{Aclass,Nx,Nu,Na}, Œ¥X,X,U,A, t,Œµ,dbg) where{Nx,Nu,Na}
    x,u,a,Œª    = ‚àÇ0(X),‚àÇ0(U),A[SVector{Nu}(1:Nu)],-‚àÇ0(A)[Nu+1] 
    g          = o.g(x,u,a)
    return o.equality ? g*Œª : KKT(g,Œª,Œµ) 
end

#-------------------------------------------------

id1(v) = v[1]
struct Hold <: AbstractElement end  

Hold(nod::Vector{Node};field::Symbol,Œªfield::Symbol=Symbol(:Œª,field)) = 
#   Constraint{Œªclass,Nx,Nu,Na,xinod,xfield, uinod,ufield,ainod,afield,Œªinod,Œªfield,typeof(g  )}
    Constraint{Xclass,1, 0, 0, (1,),(field,),(),   (),    (),   (),    1,    Œªfield,typeof(id1)}(id1,true)

#-------------------------------------------------
