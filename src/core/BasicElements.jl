struct Xclass end
struct Uclass end
struct Aclass end
Base.Symbol(::Type{Xclass}) = :X
Base.Symbol(::Type{Uclass}) = :U
Base.Symbol(::Type{Aclass}) = :A

#-------------------------------------------------

struct DofCost{Derivative,Class,Field,Tcost} <: AbstractElement
    cost :: Tcost # Function 
end
DofCost(nod::Vector{Node};class::DataType,field::Symbol,cost::Tcost,derivative=0::ùï´) where{Tcost<:Function} = DofCost{derivative,class,field,Tcost}(cost)
doflist(::Type{<:DofCost{Derivative,Class,Field}}) where{Derivative,Class,Field} = (inod =(1,), class=(Symbol(Class),), field=(Field,))
espyable(::Type{<:DofCost}) = (J=scalar,)
@espy function lagrangian(o::DofCost{Derivative,Xclass}, Œ¥X,X,U,A, t,Œ≥,dbg) where{Derivative}
    :J = o.cost(‚àÇn(X,Derivative)[1],t)
    return J
end
@espy function lagrangian(o::DofCost{Derivative,Uclass}, Œ¥X,X,U,A, t,Œ≥,dbg) where{Derivative}
    :J = o.cost(‚àÇn(U,Derivative)[1],t)
    return J
end
@espy function lagrangian(o::DofCost{Derivative,Aclass}, Œ¥X,X,U,A, t,Œ≥,dbg) where{Derivative}
    :J = o.cost(A[1])
    return J
end

#-------------------------------------------------

struct DofLoad{Tvalue,Field} <: AbstractElement
    value      :: Tvalue # Function
end
DofLoad(nod::Vector{Node};field::Symbol,value::Tvalue) where{Tvalue<:Function} = DofLoad{Tvalue,field}(value)
doflist(::Type{DofLoad{Tvalue,Field}}) where{Tvalue,Field}=(inod=(1,), class=(:X,), field=(Field,))
@espy function residual(o::DofLoad, X,U,A, t,Œ≥,dbg) 
    :F = o.value(t)
    return SVector{1}(-F)
end
espyable(::Type{<:DofLoad}) = (F=scalar,)

#-------------------------------------------------

S(  Œª,g,Œ≥) = (g+Œª    -hypot(g-Œª,2Œ≥))/2 # Modified interior point method's take on KKT's-complementary slackness 
S‚àÇg(Œª,g,Œ≥) = (1-(g-Œª)/hypot(g-Œª,2Œ≥))/2

#KKT(Œª        ,g         ,Œ≥::ùï£,Œª‚Çõ,g‚Çõ)                 = Œª*g # A pseudo-potential with strange derivatives
KKT(Œª::ùï£        ,g::ùï£         ,Œ≥::ùï£,Œª‚Çõ,g‚Çõ)                 = Œª*g # A pseudo-potential with strange derivatives
KKT(Œª::‚àÇ‚Ñù{P,N,R},g::‚àÇ‚Ñù{P,N,R},Œ≥::ùï£,Œª‚Çõ,g‚Çõ) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(0, S‚àÇg(Œª.x/Œª‚Çõ,g.x/g‚Çõ,Œ≥)*Œª.x*g.dx + g‚Çõ*S(Œª.x/Œª‚Çõ,g.x/g‚Çõ,Œ≥)*Œª.dx)
KKT(Œª:: ‚Ñù       ,g::‚àÇ‚Ñù{P,N,R},Œ≥::ùï£,Œª‚Çõ,g‚Çõ) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(0, S‚àÇg(Œª.x/Œª‚Çõ,g.x/g‚Çõ,Œ≥)*Œª.x*g.dx                           )
KKT(Œª::‚àÇ‚Ñù{P,N,R},g:: ‚Ñù       ,Œ≥::ùï£,Œª‚Çõ,g‚Çõ) where{P,N,R<:‚Ñù} = ‚àÇ‚Ñù{P,N,R}(0,                                g‚Çõ*S(Œª.x/Œª‚Çõ,g.x/g‚Çõ,Œ≥)*Œª.dx)
function KKT(Œª::‚àÇ‚Ñù{PŒª,NŒª,RŒª},g::‚àÇ‚Ñù{Pg,Ng,Rg},Œ≥::ùï£,Œª‚Çõ,g‚Çõ) where{PŒª,Pg,NŒª,Ng,RŒª<:‚Ñù,Rg<:‚Ñù}
    if PŒª==Pg
        R = promote_type(RŒª,Rg)
        return ‚àÇ‚Ñù{PŒª,NŒª}(convert(R,KKT(Œª.x,g.x,Œ≥,Œª‚Çõ,g‚Çõ)),convert.(R,     S‚àÇg(Œª.x/Œª‚Çõ,g.x/g‚Çõ,Œ≥)*Œª.x*g.dx + g‚Çõ*S(Œª.x/Œª‚Çõ,g.x/g‚Çõ,Œ≥)*Œª.dx))
    elseif PŒª> Pg
        R = promote_type(RŒª,typeof(b))
        return ‚àÇ‚Ñù{PŒª,NŒª}(convert(R,KKT(Œª  ,g.x,Œ≥,Œª‚Çõ,g‚Çõ)),convert.(R,     S‚àÇg(Œª.x/Œª‚Çõ,g.x/g‚Çõ,Œ≥)*Œª.x*g.dx                            ))
    else
        R = promote_type(typeof(a),Rg)
        return ‚àÇ‚Ñù{Pg,Ng}(convert(R,KKT(Œª.x,g  ,Œ≥,Œª‚Çõ,g‚Çõ)),convert.(R,                                    g‚Çõ*S(Œª.x/Œª‚Çõ,g.x/g‚Çõ,Œ≥)*Œª.dx))
    end
end

#-------------------------------------------------

struct Constraint{Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield,Tg,Tkind} <: AbstractElement
    g        :: Tg    # g(x,t) for Xconstraints, or g(x,u,a,t) otherwise
    kind     :: Tkind # kind(t)->symbol, or Symbol for Aconstraints
    g‚Çõ        :: ùï£
    Œª‚Çõ        :: ùï£  
end
Constraint{    Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield                       }(g,kind,g‚Çõ,Œª‚Çõ) where
              {Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield} =
    Constraint{Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield,typeof(g),typeof(kind)}(g,kind,g‚Çõ,Œª‚Çõ)
Constraint(nod::Vector{Node};xinod::NTuple{Nx,ùï´},xfield::NTuple{Nx,Symbol},
                                         uinod::NTuple{Nu,ùï´},ufield::NTuple{Nu,Symbol},
                                         ainod::NTuple{Na,ùï´},afield::NTuple{Na,Symbol},
                                         Œªinod::ùï´, Œªclass::Symbol, Œªfield,
                                         g‚Çõ::ùï£=1.,Œª‚Çõ::ùï£=1.,
                                         g::Function ,kind::Function) where{Nx,Nu,Na} =
                 Constraint{Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield}(g,kind,g‚Çõ,Œª‚Çõ)
doflist(::Type{<:Constraint{Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield}}) where
                           {Œªclass,Nx,Nu,Na,xinod,xfield,uinod,ufield,ainod,afield,Œªinod,Œªfield} = 
   (inod =(xinod...           ,uinod...           ,ainod...           ,Œªinod         ), 
    class=(ntuple(i->:X,Nx)...,ntuple(i->:U,Nu)...,ntuple(i->:A,Na)...,Symbol(Œªclass)), 
    field=(xfield...          ,ufield...          ,afield...          ,Œªfield        )) 

off,equal,inequal = :off,:equal,:inequal # because @espy has its own ways with symbols... TODO improve @espy
@espy function residual(o::Constraint{Xclass,Nx,0,0}, X,U,A, t,Œ≥,dbg) where{Nx}
    P,g‚Çõ,Œª‚Çõ     = constants(‚àÇ0(X)),o.g‚Çõ,o.Œª‚Çõ
    x,Œª        = ‚àÇ0(X)[SVector{Nx}(1:Nx)], ‚àÇ0(X)[Nx+1]
    x‚àÇ         = variate{P,Nx}(x) 
    g,g‚àÇx      = value_‚àÇ{P,Nx}(o.g(x‚àÇ,t)) 
    return if o.kind(t)==off;     SVector{Nx+1}(         ntuple(i->0,Nx)...,-g‚Çõ/Œª‚Çõ*Œª         ) 
    elseif    o.kind(t)==equal;   SVector{Nx+1}((                -g‚àÇx*Œª)...,-     g         )
    elseif    o.kind(t)==inequal; SVector{Nx+1}((-S‚àÇg(Œª/Œª‚Çõ,g/g‚Çõ,Œ≥)*g‚àÇx*Œª)...,-g‚Çõ*S(Œª/Œª‚Çõ,g/g‚Çõ,Œ≥)) 
    else MuscadeException("kind(t) must have value :off, :equal or :inequal",dbg)
    end
end
@espy function lagrangian(o::Constraint{class,Nx,Nu,Na}, Œ¥X,X,U,A, t,Œ≥,dbg) where{class<:Union{Uclass,Aclass},Nx,Nu,Na}
    if class==Uclass; x,u,a,Œª = ‚àÇ0(X),‚àÇ0(U)[SVector{Nu}(1:Nu)],A                   ,‚àÇ0(U)[Nu+1] end
    if class==Aclass; x,u,a,Œª = ‚àÇ0(X),‚àÇ0(U)                   ,A[SVector{Na}(1:Na)],A[    Na+1] end
    g = o.g(x,u,a,t)
    return if o.kind(t)==off;     -o.g‚Çõ/(2o.Œª‚Çõ)*Œª^2 
    elseif    o.kind(t)==equal;   -g*Œª
    elseif    o.kind(t)==inequal; -KKT(Œª,g,Œ≥,o.Œª‚Çõ,o.g‚Çõ) 
    else MuscadeException("kind(t) must have value :off, :equal or :inequal",dbg)
    end
end

#-------------------------------------------------

struct Hold <: AbstractElement end  
# id1(v,t) = v[1]
# eq(t)    = :equal
Hold(nod::Vector{Node};field::Symbol,Œªfield::Symbol=Symbol(:Œª,field)) = 
    Constraint{Xclass,1, 0, 0, (1,),(field,),(),   (),    (),   (),    1,    Œªfield}((v,t)->v[1] , t->:equal,1.,1.)
#   Constraint{Œªclass,Nx,Nu,Na,xinod,xfield, uinod,ufield,ainod,afield,Œªinod,Œªfield}

#-------------------------------------------------
