
###--------------------- ASMstaticX: for good old static FEM

struct OUTstaticX{TŒª,TŒªx} 
    LŒª    :: TŒª
    LŒªx   :: TŒªx 
    Œ±     :: Ref{ùï£}
end   
function prepare(::Type{OUTstaticX},model,dis) 
    dofgr              = allXdofs(model,dis)
    ndof               = getndof(dofgr)
    narray,neletyp     = 2,getneletyp(model)
    asm                = Matrix{ùï´2}(undef,narray,neletyp)  
    LŒª                 = asmvec!(view(asm,1,:),dofgr,dis) 
    LŒªx                = asmmat!(view(asm,2,:),view(asm,1,:),view(asm,1,:),ndof,ndof) 
    out                = OUTstaticX(LŒª,LŒªx,Ref{ùï£}())
    return out,asm,dofgr
end
function zero!(out::OUTstaticX)
    zero!(out.LŒª)
    zero!(out.LŒªx)
    out.Œ±[] = ‚àû    
end
function addin!(out::OUTstaticX,asm,iele,scale,eleobj::E,Œõ,X::NTuple{Nxdir,<:SVector{Nx}},U,A, t,Œ≥,dbg) where{E,Nxdir,Nx}
    if Nx==0; return end # don't waste time on Acost elements...   
    ŒîX         = Œ¥{1,Nx,ùï£}()                 # NB: precedence==1, input must not be Adiff 
    LŒª,Œ±       = scaledresidual(scale,eleobj, (‚àÇ0(X)+ŒîX,),U,A, t,Œ≥,dbg)
    add_value!(out.LŒª ,asm[1],iele,LŒª)
    add_‚àÇ!{1}( out.LŒªx,asm[2],iele,LŒª)
    out.Œ±[]    = min(out.Œ±[],Œ±)
end

###---------------------
function staticX(pstate,dbg;model::Model,time::AbstractVector{ùï£},
                    initial::State=State(model,Disassembler(model)),
                    maxiter::‚Ñ§=50,maxŒîx::‚Ñù=1e-5,maxresidual::‚Ñù=‚àû,
                    verbose::ùïì=true,saveiter::ùîπ=false,Œ≥0::ùï£=1.,Œ≥fac1::ùï£=.5,Œ≥fac2::ùï£=100.)
    # important: this code assumes that there is no œá in state.
    verb             = verbose
    dis              = initial.dis
    out,asm,dofgr    = prepare(OUTstaticX,model,dis)
    asmt,solt,citer  = 0.,0.,0
    cŒîx¬≤,cLŒª¬≤        = maxŒîx^2,maxresidual^2
    state            = allocate(pstate,Vector{State}(undef,saveiter ? maxiter : length(time))) # state is not a return argument so that data is not lost in case of exception
    s                = initial 
    local facLŒªx # ::SuiteSparse.UMFPACK.UmfpackLU{ùï£,ùï´}
    for (step,t)     ‚àà enumerate(time)
        verb && @printf "    step %3d" step
        s            = settime(s,t)
        Œ≥            = Œ≥0
        for iiter    = 1:maxiter
            citer   += 1
            asmt+=@elapsed assemble!(out,asm,dis,model,s, Œ≥,(dbg...,solver=:StaticX,step=step,iiter=iiter))
            solt+=@elapsed try if step==1 && iiter==1
                facLŒªx = lu(out.LŒªx) 
            else
                lu!(facLŒªx,out.LŒªx) 
            end catch; muscadeerror(@sprintf("Incremental solution failed at step=%i, iiter=%i",step,iiter)) end
            solt+=@elapsed Œîx  = facLŒªx\out.LŒª
            Œîx¬≤,LŒª¬≤  = sum(Œîx.^2),sum(out.LŒª.^2)
            decrement!(s,0,Œîx,dofgr)
            Œ≥       *= Œ≥fac1*exp(-(out.Œ±[]/Œ≥fac2)^2)
            saveiter && (state[iiter]=State(s.Œõ,deepcopy(s.X),s.U,s.A,s.time,Œ≥,model,dis))
            if Œîx¬≤‚â§cŒîx¬≤ && LŒª¬≤‚â§cLŒª¬≤ 
                verb && @printf " converged in %3d iterations. |Œîx|=%7.1e |LŒª|=%7.1e\n" iiter ‚àö(Œîx¬≤) ‚àö(LŒª¬≤)
                ~saveiter && (state[step]=State(s.Œõ,deepcopy(s.X),s.U,s.A,s.time,Œ≥,model,dis))
                break#out of the iiter loop
            end
            iiter==maxiter && muscadeerror(@sprintf(" no convergence after %3d iterations |Œîx|:%g / %g, |LŒª|:%g / %g",iiter,‚àö(Œîx¬≤),maxŒîx,‚àö(LŒª¬≤)^2,maxresidual))
        end
    end
    verb && @printf "\n    nel=%d, ndof=%d, nstep=%d, niter=%d, niter/nstep=%5.2f\n" getnele(model) getndof(dofgr) length(time) citer citer/length(time)
    verb && @printf "    Build  time = %s, (per iteration: %s, per iteration and element: %s)\n" showtime(asmt)  showtime(asmt/citer)  showtime(asmt/citer/getnele(model))
    verb && @printf "    Solve  time = %s, (per iteration: %s, per iteration and dof:     %s)\n" showtime(solt)  showtime(solt/citer)  showtime(solt/citer/getndof(dofgr))
    return
end
