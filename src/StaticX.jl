
###--------------------- ASMstaticX: for good old static FEM

mutable struct OUTstaticX{TŒª,TŒªx} 
    LŒª    :: TŒª
    LŒªx   :: TŒªx 
    Œ±     :: ùï£
end   
function prepare(::Type{OUTstaticX},model,dis) 
    dofgr              = allXdofs(model,dis)
    ndof               = getndof(dofgr)
    narray,neletyp     = 2,getneletyp(model)
    asm                = Matrix{ùï´2}(undef,narray,neletyp)  
    LŒª                 = asmvec!(view(asm,1,:),dofgr,dis) 
    LŒªx                = asmmat!(view(asm,2,:),view(asm,1,:),view(asm,1,:),ndof,ndof) 
    out                = OUTstaticX(LŒª,LŒªx,‚àû)
    return out,asm,dofgr
end
function zero!(out::OUTstaticX)
    zero!(out.LŒª)
    zero!(out.LŒªx)
    out.Œ± = ‚àû    
end
function addin!(out::OUTstaticX,asm,iele,scale,eleobj::E,Œõ,X::NTuple{Nxdir,<:SVector{Nx}},U,A, t,Œ≥,dbg) where{E,Nxdir,Nx}
    if Nx==0; return end # don't waste time on Acost elements...  
    ŒîX         = Œ¥{1,Nx,ùï£}(scale.X)                 # NB: precedence==1, input must not be Adiff 
    LŒª,Œ±       = getresidual(implemented(eleobj)...,eleobj,(‚àÇ0(X)+ŒîX,),U,A, t,Œ≥,dbg)
    LŒª         = LŒª .* scale.X
    add_value!(out.LŒª ,asm[1],iele,LŒª)
    add_‚àÇ!{1}( out.LŒªx,asm[2],iele,LŒª)
    out.Œ±      = min(out.Œ±,Œ±)
end


# function scaledresidual(scale,eleobj::AbstractElement, Xs::NTuple{Nxder},Us::NTuple{Nuder},As, t,Œ≥,dbg) where{Nxder,Nuder} 
#     X     = NTuple{Nxder}(xs.*scale.X for xs‚ààXs)  
#     U     = NTuple{Nuder}(us.*scale.U for us‚ààUs)
#     A     =       As.*scale.A
#     R,Œ±   = getresidual(implemented(eleobj)...,eleobj, X,U,A, t,Œ≥,dbg) 
#     hasnan(R) && muscadeerror(dbg,"NaN in a residual or its partial derivatives")
#     return R.*scale.Œõ ,Œ±
# end
###---------------------
struct StaticX end
getnder(::Type{StaticX}) = (nXder=1,nUder=1)
function solve(::Type{StaticX},pstate,verbose,dbg;time::AbstractVector{ùï£},
                    initialstate::State,
                    maxiter::‚Ñ§=50,maxŒîx::‚Ñù=1e-5,maxresidual::‚Ñù=‚àû,
                    saveiter::ùîπ=false,Œ≥0::ùï£=1.,Œ≥fac1::ùï£=.5,Œ≥fac2::ùï£=100.)
    # important: this code assumes that there is no œá in state.
    model,dis        = initialstate.model,initialstate.dis
    out,asm,dofgr    = prepare(OUTstaticX,model,dis)
    asmt,solt,citer  = 0.,0.,0
    cŒîx¬≤,cLŒª¬≤        = maxŒîx^2,maxresidual^2
    state            = allocate(pstate,Vector{State{1,1}}(undef,saveiter ? maxiter : length(time))) # state is not a return argument so that data is not lost in case of exception
    s                = State{1,1}(initialstate) 
    local facLŒªx 
    for (step,t)     ‚àà enumerate(time)
        s            = settime(s,t)
        Œ≥            = Œ≥0
        for iiter    = 1:maxiter
            citer   += 1
            asmt+=@elapsed assemble!(out,asm,dis,model,s, Œ≥,(dbg...,solver=:StaticX,step=step,iiter=iiter))
            solt+=@elapsed try if step==1 && iiter==1
                facLŒªx = lu(out.LŒªx) 
            else
                lu!(facLŒªx,out.LŒªx) 
            end catch; muscadeerror(@sprintf("matrix factorization failed at step=%i, iiter=%i",step,iiter)) end
#            @show cond(Array(out.LŒªx))
            solt+=@elapsed Œîx  = facLŒªx\out.LŒª
            Œîx¬≤,LŒª¬≤  = sum(Œîx.^2),sum(out.LŒª.^2)
            solt+=@elapsed decrement!(s,0,Œîx,dofgr)
            Œ≥       *= Œ≥fac1*exp(-(out.Œ±/Œ≥fac2)^2)
            verbose && saveiter && @printf("        iteration %3d, Œ≥= %7.1e\n",iiter,Œ≥)
            saveiter && (state[iiter]=State(s.Œõ,deepcopy(s.X),s.U,s.A,s.time,Œ≥,model,dis))
            if Œîx¬≤‚â§cŒîx¬≤ && LŒª¬≤‚â§cLŒª¬≤ 
                verbose && @printf "    step %3d converged in %3d iterations. |Œîx|=%7.1e |LŒª|=%7.1e\n" step iiter ‚àö(Œîx¬≤) ‚àö(LŒª¬≤)
                ~saveiter && (state[step]=State(s.Œõ,deepcopy(s.X),s.U,s.A,s.time,Œ≥,model,dis))
                break#out of the iiter loop
            end
            iiter==maxiter && muscadeerror(@sprintf("no convergence in step %3d after %3d iterations |Œîx|=%g / %g, |LŒª|=%g / %g",step,iiter,‚àö(Œîx¬≤),maxŒîx,‚àö(LŒª¬≤)^2,maxresidual))
        end
    end
    verbose && @printf "\n    nel=%d, ndof=%d, nstep=%d, niter=%d, niter/nstep=%5.2f\n" getnele(model) getndof(dofgr) length(time) citer citer/length(time)
    verbose && @printf "    Build  time = %s, (per iteration: %s, per iteration and element: %s)\n" showtime(asmt)  showtime(asmt/citer)  showtime(asmt/citer/getnele(model))
    verbose && @printf "    Solve  time = %s, (per iteration: %s, per iteration and dof:     %s)\n" showtime(solt)  showtime(solt/citer)  showtime(solt/citer/getndof(dofgr))
    return
end
